.row {
  max-width: $grid-width; // if available width less than max-width, it'll just fill 100% of the width

  /* browser will automatically figure out the margin defined as auto,
     and here, left and right margins would be the same */
  margin: 0 auto;

  &:not(:last-child) { // :not pseudo class
    margin-bottom: $gutter-vertical;
    @include respond(tab-port) {
      margin-bottom: $gutter-vertical-small;
    }
    @include respond(phone) {
      margin-bottom: $gutter-vertical-tiny;
    }
  }

  @include clearfix; // clearfix hack for float-based layout

  @include respond(tab-port) {
    max-width: $grid-width-small;
    padding: 0 3rem;
  }
  @include respond(phone) {
    max-width: $grid-width-tiny;
    padding: 0 3rem;
  }

  // attribute selector
  // ^= means the beginning with, *= means containing, $= means ending with
  [class^="col-"] { // DRY principle, put common declarations for columns here
    float: left; // float-based layout

    &:not(:last-child) {
      margin-right: $gutter-horizontal;
      @include respond(tab-port) {
        margin-right: 0;
        margin-bottom: $gutter-vertical-small;
      }
      @include respond(phone) {
        margin-right: 0;
        margin-bottom: $gutter-vertical-tiny;
      }
    }

    @include respond(tab-port) {
      width: 100% !important; // make each column take a full row
    }
  }

  .col-1-of-2 {
    /* math calculation (supported by native CSS), can even mix units;
      note that in Sass we cannot do calculations with multiple units;
      Calculation with multiple units can only occur in render phase (with computed values),
      so it makes sense that Sass doesn't support it. */
    width: calc((100% - #{$gutter-horizontal}) / 2); // use #{$...} to access Sass variables
  }

  .col-1-of-3 {
    width: calc((100% - (#{$gutter-horizontal}) * 2) / 3);
  }

  .col-2-of-3 {
    width: calc(((100% - (#{$gutter-horizontal}) * 2) / 3) * 2 + #{$gutter-horizontal});
  }

  .col-1-of-4 {
    width: calc((100% - (#{$gutter-horizontal}) * 3) / 4);
  }

  .col-2-of-4 {
    width: calc(((100% - (#{$gutter-horizontal}) * 3) / 4) * 2 + #{$gutter-horizontal});
  }

  .col-3-of-4 {
    width: calc(((100% - (#{$gutter-horizontal}) * 3) / 4) * 3 + #{$gutter-horizontal} * 2);
  }

}

